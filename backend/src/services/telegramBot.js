const { Telegraf } = require('telegraf');
const dotenv = require('dotenv');

dotenv.config();

const botToken = process.env.TELEGRAM_BOT_TOKEN;
const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;

// Initialize bot
const bot = botToken ? new Telegraf(botToken) : null;

// Start bot if token is provided
if (bot) {
  bot.launch().catch(err => {
    console.error('Error launching Telegram bot:', err);
  });
  
  console.log('Telegram bot started');
} else {
  console.log('Telegram bot not initialized: Bot token not provided');
}

const telegramBot = {
  // Send order notification to customer
  sendOrderConfirmation: async (order, chatId) => {
    if (!bot || !chatId) return;
    
    try {
      const message = `
üéÆ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: \`${order._id}\`
–°—Ç–∞—Ç—É—Å: ${order.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏' : order.status === 'completed' ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω' : '‚ùå –û—Ç–º–µ–Ω–µ–Ω'}
–°—É–º–º–∞: ${order.total} ‚ÇΩ

*–¢–æ–≤–∞—Ä—ã:*
${order.items.map(item => `- ${item.title} (${item.edition}) - ${item.price} ‚ÇΩ`).join('\n')}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
`;
      
      await bot.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', callback_data: `confirm_order_${order._id}` }]
          ]
        }
      });
    } catch (error) {
      console.error('Error sending order confirmation to Telegram:', error);
    }
  },
  
  // Send order notification to admin
  sendOrderNotification: async (order) => {
    if (!bot || !adminChatId) return;
    
    try {
      const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: \`${order._id}\`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${order.username ? `@${order.username}` : `ID: ${order.userId}`}
–°—É–º–º–∞: ${order.total} ‚ÇΩ

*–¢–æ–≤–∞—Ä—ã:*
${order.items.map(item => `- ${item.title} (${item.edition}) - ${item.price} ‚ÇΩ`).join('\n')}
`;
      
      await bot.telegram.sendMessage(adminChatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `complete_order_${order._id}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_order_${order._id}` }
            ]
          ]
        }
      });
    } catch (error) {
      console.error('Error sending order notification to Telegram:', error);
    }
  },
  
  // Send order status update
  sendOrderStatusUpdate: async (order) => {
    if (!bot || !order.userId) return;
    
    try {
      const statusText = order.status === 'completed' ? 
        '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.' : 
        (order.status === 'cancelled' ? '‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.' : '‚è≥ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.');
      
      const message = `
üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞*

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: \`${order._id}\`
–°—Ç–∞—Ç—É—Å: ${statusText}

${order.status === 'completed' ? '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.' : ''}
`;
      
      await bot.telegram.sendMessage(order.userId, message, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      console.error('Error sending status update to Telegram:', error);
    }
  }
};

// Register bot command handlers
if (bot) {
  // Start command
  bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏–≥—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  });
  
  // Help command
  bot.help((ctx) => {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É. –î–ª—è –∑–∞–∫–∞–∑–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
  });
  
  // Handle callback queries for order actions
  bot.action(/complete_order_(.+)/, async (ctx) => {
    try {
      const orderId = ctx.match[1];
      
      // Update order status in database (would be implemented in a real app)
      // await Order.findByIdAndUpdate(orderId, { status: 'completed' });
      
      ctx.answerCbQuery('–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π');
      ctx.editMessageText(`–ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.`);
    } catch (error) {
      ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      console.error('Error handling complete order callback:', error);
    }
  });
  
  bot.action(/cancel_order_(.+)/, async (ctx) => {
    try {
      const orderId = ctx.match[1];
      
      // Update order status in database (would be implemented in a real app)
      // await Order.findByIdAndUpdate(orderId, { status: 'cancelled' });
      
      ctx.answerCbQuery('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
      ctx.editMessageText(`–ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω.`);
    } catch (error) {
      ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞');
      console.error('Error handling cancel order callback:', error);
    }
  });
  
  bot.action(/confirm_order_(.+)/, async (ctx) => {
    try {
      const orderId = ctx.match[1];
      
      ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!');
      ctx.editMessageText(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}!`);
    } catch (error) {
      ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏');
      console.error('Error handling confirm order callback:', error);
    }
  });
}

module.exports = telegramBot;